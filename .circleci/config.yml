version: 2

jobs:
    build:
        environment:
            TZ: "/usr/share/zoneinfo/America/Detroit"
        working_directory: ~/app
        docker:
            # We are using this image because:
            # - It has Python preinstalled, which we need to do anything useful.
            # - It's Debian Jessie, which avoids "libssl-dev" being too new for
            # the versions of Python we want to test/support. (Debian Stretch
            # exhibits this problem and makes it impossible to test all 3.x
            # variants in a single tox execution. See
            # https://github.com/pyenv/pyenv/wiki/Common-build-problems#error-the-python-ssl-extension-was-not-compiled-missing-the-openssl-lib
            # for details regarding "libssl-dev" vs "libssl1.0-dev".)
            # - It has Node, for our DevOps integrations.
            - image: circleci/python:3.6.6-jessie-node-browsers

        steps:
            ##
            # SETUP
            ##
            - run:
                name: Flag local build
                command: |
                  if [[ "$CIRCLE_BUILD_NUM" == '' ]]; then
                    touch ~/.localCircleBuild
                  fi
            - add_ssh_keys
            - checkout
            - run:
                name: Validate PR
                command: |
                  if [[ ! -f ~/.localCircleBuild ]]; then
                    bash .devops/validate-pr.sh
                  fi
            - run:
                name: Install jq
                command: |
                  sudo curl -sSL -o /usr/local/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
                  sudo chmod +x /usr/local/bin/jq
            - run:
                name: Calculate codebase version
                command: |
                  git config --global user.email "$ESGBOT_GIT_EMAIL" && git config --global user.name "$ESGBOT_GIT_NAME"
                  bash .devops/calculate-app-version.sh
                  bash .devops/semverTo440.sh
                  sed -i -e "s/__version__ = .*/__version__ = '$(cat ~/.version440)'/" auklet/__about__.py
                  VERSION_SIMPLE=$(cat ~/.version | xargs | cut -f1 -d"+")
                  sed -i -e "s/__semver__ = .*/__semver__ = '$VERSION_SIMPLE'/" auklet/__about__.py
            - run:
                name: Upgrade Docker Compose
                command: |
                  set -x
                  curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` > ./docker-compose
                  chmod +x ./docker-compose
                  sudo mv ./docker-compose /usr/local/bin
            - setup_remote_docker
            - run:
                name: Show Docker Versions
                command: |
                  set -x
                  docker --version
                  docker-compose --version

            ##
            # RESTORE CACHES
            ##
            - restore_cache:
                key: v1-whitesource-cache-{{ checksum "requirements.txt" }}
            - restore_cache:
                key: v1-pip-cache-{{ arch }}-{{ checksum "requirements.txt" }}
            - run:
                name: Ensure caches exist
                command: |
                  mkdir -p ~/.cache/pip ~/.whitesource-pip

            ##
            # TESTS
            ##
            - run:
                name: Install Python dependencies
                command: |
                  # https://github.com/pyenv/pyenv/wiki/Common-build-problems#requirements
                  sudo apt-get -y install \
                    make \
                    build-essential \
                    zlib1g-dev \
                    libbz2-dev \
                    libreadline-dev \
                    libsqlite3-dev \
                    wget \
                    curl \
                    llvm \
                    libncurses5-dev \
                    libncursesw5-dev \
                    xz-utils \
                    tk-dev \
                    libffi-dev \
                    liblzma-dev
                  # We need to use OpenSSL 1.0.2 to support all 3.x variants,
                  # and that version is only available in Jessie Backports.
                  # We'll also upgrade OpenSSL, just for good measure.
                  echo "deb http://ftp.debian.org/debian jessie-backports main" | sudo tee /etc/apt/sources.list.d/backports.list
                  sudo apt-get update
                  sudo apt-get -y -t jessie-backports install openssl libssl-dev
            - run:
                name: Run Unit Tests
                command: |
                  if [[ -f ~/.localCircleBuild ]]; then
                    CIRCLE_LOCAL_BUILD=true
                  else
                    CIRCLE_LOCAL_BUILD=false
                  fi
                  bash .devops/test_and_coverage.sh $CIRCLE_LOCAL_BUILD
            - store_artifacts:
                 path: ~/app/htmlcov
            - run:
                name: Run Whitesource
                command: |
                  set -ou pipefail
                  if [[ ! -f ~/.localCircleBuild ]]; then
                    bash .devops/whitesource.sh
                  fi

            ##
            # DOCKER
            ##
            - run:
                name: Build Docker Benchmark Tests
                command: |
                  set -x
                  docker-compose build
            - run:
                name: Run Docker Benchmark Tests
                command: |
                  set -x
                  docker-compose run benchmark bash /startBenchmark.sh

            ##
            # SAVE CACHES
            ##
            - save_cache:
                key: v1-whitesource-cache-{{ checksum "requirements.txt" }}
                paths:
                    - /home/circleci/.whitesource-pip
            - save_cache:
                key: v1-pip-cache-{{ arch }}-{{ checksum "requirements.txt" }}
                paths:
                    - /home/circleci/.cache/pip

            ##
            # DEPLOYMENT
            ##
            - run:
                name: Deploy Edge (If staging)
                command: |
                  set -ou pipefail
                  if [[ ! -f ~/.localCircleBuild ]]; then
                    if [ "${CIRCLE_BRANCH}" == "edge" ]; then
                      bash .devops/deploy.sh staging
                    fi
                  fi
            - run:
                name: Deploy QA (If master)
                command: |
                  set -ou pipefail
                  if [[ ! -f ~/.localCircleBuild ]]; then
                    if [ "${CIRCLE_BRANCH}" == "master" ]; then
                      bash .devops/deploy.sh qa
                      bash .devops/post-release.sh
                      # Need to checkout master again so we can run more scripts.
                      git checkout master
                      bash .devops/updateProdReleasePr.sh
                    fi
                  fi
            - run:
                name: Deploy Production (If production)
                command: |
                  set -ou pipefail
                  if [[ ! -f ~/.localCircleBuild ]]; then
                    if [ "${CIRCLE_BRANCH}" == "production" ]; then
                      bash .devops/deploy.sh production
                      bash .devops/post-release.sh
                    fi
                  fi
